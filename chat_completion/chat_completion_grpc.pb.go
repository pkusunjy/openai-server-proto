// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: chat_completion/chat_completion.proto

package chat_completion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_Ask_FullMethodName                          = "/chat_completion.ChatService/ask"
	ChatService_Chat_FullMethodName                         = "/chat_completion.ChatService/chat"
	ChatService_WriteArticleByTitle_FullMethodName          = "/chat_completion.ChatService/write_article_by_title"
	ChatService_TranscribeJudge_FullMethodName              = "/chat_completion.ChatService/transcribe_judge"
	ChatService_TextToSpeech_FullMethodName                 = "/chat_completion.ChatService/text_to_speech"
	ChatService_IeltsSpeakingP1Generate_FullMethodName      = "/chat_completion.ChatService/ielts_speaking_p1_generate"
	ChatService_IeltsSpeakingP1Enrich_FullMethodName        = "/chat_completion.ChatService/ielts_speaking_p1_enrich"
	ChatService_IeltsSpeakingP2Generate_FullMethodName      = "/chat_completion.ChatService/ielts_speaking_p2_generate"
	ChatService_IeltsSpeakingP2Enrich_FullMethodName        = "/chat_completion.ChatService/ielts_speaking_p2_enrich"
	ChatService_IeltsSpeakingP2Score_FullMethodName         = "/chat_completion.ChatService/ielts_speaking_p2_score"
	ChatService_IeltsSpeakingP3Generate_FullMethodName      = "/chat_completion.ChatService/ielts_speaking_p3_generate"
	ChatService_IeltsSpeakingP3Enrich_FullMethodName        = "/chat_completion.ChatService/ielts_speaking_p3_enrich"
	ChatService_IeltsWritingT1Enrich_FullMethodName         = "/chat_completion.ChatService/ielts_writing_t1_enrich"
	ChatService_IeltsWritingT1Score_FullMethodName          = "/chat_completion.ChatService/ielts_writing_t1_score"
	ChatService_IeltsWritingT2Generate_FullMethodName       = "/chat_completion.ChatService/ielts_writing_t2_generate"
	ChatService_IeltsWritingT2Enrich_FullMethodName         = "/chat_completion.ChatService/ielts_writing_t2_enrich"
	ChatService_IeltsWritingT2Score_FullMethodName          = "/chat_completion.ChatService/ielts_writing_t2_score"
	ChatService_IeltsSpeakingWordsSynonyms_FullMethodName   = "/chat_completion.ChatService/ielts_speaking_words_synonyms"
	ChatService_IeltsSpeakingWordsUsage_FullMethodName      = "/chat_completion.ChatService/ielts_speaking_words_usage"
	ChatService_IeltsWritingWordsTheme_FullMethodName       = "/chat_completion.ChatService/ielts_writing_words_theme"
	ChatService_IeltsWritingWordsSynonyms_FullMethodName    = "/chat_completion.ChatService/ielts_writing_words_synonyms"
	ChatService_IeltsWritingWordsCombination_FullMethodName = "/chat_completion.ChatService/ielts_writing_words_combination"
	ChatService_ToeflSpeakingP1Generate_FullMethodName      = "/chat_completion.ChatService/toefl_speaking_p1_generate"
	ChatService_ToeflSpeakingP1Enrich_FullMethodName        = "/chat_completion.ChatService/toefl_speaking_p1_enrich"
	ChatService_ToeflSpeakingP1Score_FullMethodName         = "/chat_completion.ChatService/toefl_speaking_p1_score"
	ChatService_ToeflWritingP1Enrich_FullMethodName         = "/chat_completion.ChatService/toefl_writing_p1_enrich"
	ChatService_ToeflWritingP1Score_FullMethodName          = "/chat_completion.ChatService/toefl_writing_p1_score"
	ChatService_ToeflWritingP2Enrich_FullMethodName         = "/chat_completion.ChatService/toefl_writing_p2_enrich"
	ChatService_ToeflWritingP2Score_FullMethodName          = "/chat_completion.ChatService/toefl_writing_p2_score"
	ChatService_ToeflWritingP3Enrich_FullMethodName         = "/chat_completion.ChatService/toefl_writing_p3_enrich"
	ChatService_ToeflWritingP3Generate_FullMethodName       = "/chat_completion.ChatService/toefl_writing_p3_generate"
	ChatService_CnToEn_FullMethodName                       = "/chat_completion.ChatService/cn_to_en"
	ChatService_EnToCn_FullMethodName                       = "/chat_completion.ChatService/en_to_cn"
	ChatService_IeltsSpeakingExercise_FullMethodName        = "/chat_completion.ChatService/ielts_speaking_exercise"
	ChatService_IeltsSpeakingExam_FullMethodName            = "/chat_completion.ChatService/ielts_speaking_exam"
	ChatService_IeltsTalkReport_FullMethodName              = "/chat_completion.ChatService/ielts_talk_report"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Ask(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
	WriteArticleByTitle(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	TranscribeJudge(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	TextToSpeech(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	// 雅思口语P1
	IeltsSpeakingP1Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsSpeakingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 雅思口语P2
	IeltsSpeakingP2Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsSpeakingP2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsSpeakingP2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 雅思口语P3
	IeltsSpeakingP3Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsSpeakingP3Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 雅思写作T1
	IeltsWritingT1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingT1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 雅思写作T2
	IeltsWritingT2Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingT2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingT2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 高分词汇挖掘
	IeltsSpeakingWordsSynonyms(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsSpeakingWordsUsage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingWordsTheme(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingWordsSynonyms(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	IeltsWritingWordsCombination(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 托福口语
	ToeflSpeakingP1Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	ToeflSpeakingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	ToeflSpeakingP1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 托福综合写作
	ToeflWritingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	ToeflWritingP1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 托福学术写作
	ToeflWritingP2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	ToeflWritingP2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 职场邮件
	ToeflWritingP3Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	ToeflWritingP3Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 中英互译
	CnToEn(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	EnToCn(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
	// 雅思口语陪练
	IeltsSpeakingExercise(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	// 雅思口语模考
	IeltsSpeakingExam(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	// 雅思对话报告
	IeltsTalkReport(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Ask(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_Ask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ChatClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

func (c *chatServiceClient) WriteArticleByTitle(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_WriteArticleByTitle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WriteArticleByTitleClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) TranscribeJudge(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_TranscribeJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) TextToSpeech(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_TextToSpeech_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) IeltsSpeakingP1Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], ChatService_IeltsSpeakingP1Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP1GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[3], ChatService_IeltsSpeakingP1Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP1EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP2Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[4], ChatService_IeltsSpeakingP2Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[5], ChatService_IeltsSpeakingP2Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[6], ChatService_IeltsSpeakingP2Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP3Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[7], ChatService_IeltsSpeakingP3Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP3GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingP3Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[8], ChatService_IeltsSpeakingP3Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP3EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingT1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[9], ChatService_IeltsWritingT1Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT1EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingT1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[10], ChatService_IeltsWritingT1Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT1ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingT2Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[11], ChatService_IeltsWritingT2Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingT2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[12], ChatService_IeltsWritingT2Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingT2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[13], ChatService_IeltsWritingT2Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingWordsSynonyms(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[14], ChatService_IeltsSpeakingWordsSynonyms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingWordsSynonymsClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingWordsUsage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[15], ChatService_IeltsSpeakingWordsUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingWordsUsageClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingWordsTheme(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[16], ChatService_IeltsWritingWordsTheme_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsThemeClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingWordsSynonyms(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[17], ChatService_IeltsWritingWordsSynonyms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsSynonymsClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsWritingWordsCombination(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[18], ChatService_IeltsWritingWordsCombination_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsCombinationClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflSpeakingP1Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[19], ChatService_ToeflSpeakingP1Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflSpeakingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[20], ChatService_ToeflSpeakingP1Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflSpeakingP1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[21], ChatService_ToeflSpeakingP1Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP1Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[22], ChatService_ToeflWritingP1Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP1EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP1Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[23], ChatService_ToeflWritingP1Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP1ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP2Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[24], ChatService_ToeflWritingP2Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP2EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP2Score(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[25], ChatService_ToeflWritingP2Score_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP2ScoreClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP3Enrich(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[26], ChatService_ToeflWritingP3Enrich_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP3EnrichClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) ToeflWritingP3Generate(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[27], ChatService_ToeflWritingP3Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP3GenerateClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) CnToEn(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[28], ChatService_CnToEn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_CnToEnClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) EnToCn(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[29], ChatService_EnToCn_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_EnToCnClient = grpc.ServerStreamingClient[ChatMessage]

func (c *chatServiceClient) IeltsSpeakingExercise(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_IeltsSpeakingExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) IeltsSpeakingExam(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_IeltsSpeakingExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) IeltsTalkReport(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, ChatService_IeltsTalkReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
type ChatServiceServer interface {
	Ask(context.Context, *ChatMessage) (*ChatMessage, error)
	Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	WriteArticleByTitle(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	TranscribeJudge(context.Context, *ChatMessage) (*ChatMessage, error)
	TextToSpeech(context.Context, *ChatMessage) (*ChatMessage, error)
	// 雅思口语P1
	IeltsSpeakingP1Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsSpeakingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 雅思口语P2
	IeltsSpeakingP2Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsSpeakingP2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsSpeakingP2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 雅思口语P3
	IeltsSpeakingP3Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsSpeakingP3Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 雅思写作T1
	IeltsWritingT1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingT1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 雅思写作T2
	IeltsWritingT2Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingT2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingT2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 高分词汇挖掘
	IeltsSpeakingWordsSynonyms(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsSpeakingWordsUsage(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingWordsTheme(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingWordsSynonyms(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	IeltsWritingWordsCombination(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 托福口语
	ToeflSpeakingP1Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	ToeflSpeakingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	ToeflSpeakingP1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 托福综合写作
	ToeflWritingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	ToeflWritingP1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 托福学术写作
	ToeflWritingP2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	ToeflWritingP2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 职场邮件
	ToeflWritingP3Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	ToeflWritingP3Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 中英互译
	CnToEn(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	EnToCn(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error
	// 雅思口语陪练
	IeltsSpeakingExercise(context.Context, *ChatMessage) (*ChatMessage, error)
	// 雅思口语模考
	IeltsSpeakingExam(context.Context, *ChatMessage) (*ChatMessage, error)
	// 雅思对话报告
	IeltsTalkReport(context.Context, *ChatMessage) (*ChatMessage, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) Ask(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (UnimplementedChatServiceServer) Chat(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServiceServer) WriteArticleByTitle(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method WriteArticleByTitle not implemented")
}
func (UnimplementedChatServiceServer) TranscribeJudge(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeJudge not implemented")
}
func (UnimplementedChatServiceServer) TextToSpeech(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP1Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP1Generate not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP1Enrich not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP2Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP2Generate not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP2Enrich not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP2Score not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP3Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP3Generate not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingP3Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingP3Enrich not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingT1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingT1Enrich not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingT1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingT1Score not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingT2Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingT2Generate not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingT2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingT2Enrich not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingT2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingT2Score not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingWordsSynonyms(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingWordsSynonyms not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingWordsUsage(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsSpeakingWordsUsage not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingWordsTheme(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingWordsTheme not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingWordsSynonyms(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingWordsSynonyms not implemented")
}
func (UnimplementedChatServiceServer) IeltsWritingWordsCombination(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method IeltsWritingWordsCombination not implemented")
}
func (UnimplementedChatServiceServer) ToeflSpeakingP1Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflSpeakingP1Generate not implemented")
}
func (UnimplementedChatServiceServer) ToeflSpeakingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflSpeakingP1Enrich not implemented")
}
func (UnimplementedChatServiceServer) ToeflSpeakingP1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflSpeakingP1Score not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP1Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP1Enrich not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP1Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP1Score not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP2Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP2Enrich not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP2Score(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP2Score not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP3Enrich(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP3Enrich not implemented")
}
func (UnimplementedChatServiceServer) ToeflWritingP3Generate(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ToeflWritingP3Generate not implemented")
}
func (UnimplementedChatServiceServer) CnToEn(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method CnToEn not implemented")
}
func (UnimplementedChatServiceServer) EnToCn(*ChatMessage, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method EnToCn not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingExercise(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IeltsSpeakingExercise not implemented")
}
func (UnimplementedChatServiceServer) IeltsSpeakingExam(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IeltsSpeakingExam not implemented")
}
func (UnimplementedChatServiceServer) IeltsTalkReport(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IeltsTalkReport not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Ask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Ask(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ChatServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

func _ChatService_WriteArticleByTitle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).WriteArticleByTitle(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WriteArticleByTitleServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_TranscribeJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TranscribeJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_TranscribeJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TranscribeJudge(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TextToSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TextToSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_TextToSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TextToSpeech(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_IeltsSpeakingP1Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP1Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP1GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP1Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP1Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP1EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP2Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP2Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP2Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP2Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP2Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP2Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP2ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP3Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP3Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP3GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingP3Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingP3Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingP3EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingT1Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingT1Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT1EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingT1Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingT1Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT1ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingT2Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingT2Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingT2Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingT2Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingT2Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingT2Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingT2ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingWordsSynonyms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingWordsSynonyms(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingWordsSynonymsServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingWordsUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsSpeakingWordsUsage(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsSpeakingWordsUsageServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingWordsTheme_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingWordsTheme(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsThemeServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingWordsSynonyms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingWordsSynonyms(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsSynonymsServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsWritingWordsCombination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).IeltsWritingWordsCombination(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_IeltsWritingWordsCombinationServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflSpeakingP1Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflSpeakingP1Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflSpeakingP1Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflSpeakingP1Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflSpeakingP1Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflSpeakingP1Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflSpeakingP1ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP1Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP1Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP1EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP1Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP1Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP1ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP2Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP2Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP2EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP2Score_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP2Score(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP2ScoreServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP3Enrich_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP3Enrich(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP3EnrichServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_ToeflWritingP3Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ToeflWritingP3Generate(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ToeflWritingP3GenerateServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_CnToEn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).CnToEn(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_CnToEnServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_EnToCn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).EnToCn(m, &grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_EnToCnServer = grpc.ServerStreamingServer[ChatMessage]

func _ChatService_IeltsSpeakingExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).IeltsSpeakingExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_IeltsSpeakingExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).IeltsSpeakingExercise(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_IeltsSpeakingExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).IeltsSpeakingExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_IeltsSpeakingExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).IeltsSpeakingExam(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_IeltsTalkReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).IeltsTalkReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_IeltsTalkReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).IeltsTalkReport(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_completion.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ask",
			Handler:    _ChatService_Ask_Handler,
		},
		{
			MethodName: "transcribe_judge",
			Handler:    _ChatService_TranscribeJudge_Handler,
		},
		{
			MethodName: "text_to_speech",
			Handler:    _ChatService_TextToSpeech_Handler,
		},
		{
			MethodName: "ielts_speaking_exercise",
			Handler:    _ChatService_IeltsSpeakingExercise_Handler,
		},
		{
			MethodName: "ielts_speaking_exam",
			Handler:    _ChatService_IeltsSpeakingExam_Handler,
		},
		{
			MethodName: "ielts_talk_report",
			Handler:    _ChatService_IeltsTalkReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "write_article_by_title",
			Handler:       _ChatService_WriteArticleByTitle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p1_generate",
			Handler:       _ChatService_IeltsSpeakingP1Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p1_enrich",
			Handler:       _ChatService_IeltsSpeakingP1Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p2_generate",
			Handler:       _ChatService_IeltsSpeakingP2Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p2_enrich",
			Handler:       _ChatService_IeltsSpeakingP2Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p2_score",
			Handler:       _ChatService_IeltsSpeakingP2Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p3_generate",
			Handler:       _ChatService_IeltsSpeakingP3Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_p3_enrich",
			Handler:       _ChatService_IeltsSpeakingP3Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_t1_enrich",
			Handler:       _ChatService_IeltsWritingT1Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_t1_score",
			Handler:       _ChatService_IeltsWritingT1Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_t2_generate",
			Handler:       _ChatService_IeltsWritingT2Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_t2_enrich",
			Handler:       _ChatService_IeltsWritingT2Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_t2_score",
			Handler:       _ChatService_IeltsWritingT2Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_words_synonyms",
			Handler:       _ChatService_IeltsSpeakingWordsSynonyms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_speaking_words_usage",
			Handler:       _ChatService_IeltsSpeakingWordsUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_words_theme",
			Handler:       _ChatService_IeltsWritingWordsTheme_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_words_synonyms",
			Handler:       _ChatService_IeltsWritingWordsSynonyms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ielts_writing_words_combination",
			Handler:       _ChatService_IeltsWritingWordsCombination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_speaking_p1_generate",
			Handler:       _ChatService_ToeflSpeakingP1Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_speaking_p1_enrich",
			Handler:       _ChatService_ToeflSpeakingP1Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_speaking_p1_score",
			Handler:       _ChatService_ToeflSpeakingP1Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p1_enrich",
			Handler:       _ChatService_ToeflWritingP1Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p1_score",
			Handler:       _ChatService_ToeflWritingP1Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p2_enrich",
			Handler:       _ChatService_ToeflWritingP2Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p2_score",
			Handler:       _ChatService_ToeflWritingP2Score_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p3_enrich",
			Handler:       _ChatService_ToeflWritingP3Enrich_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "toefl_writing_p3_generate",
			Handler:       _ChatService_ToeflWritingP3Generate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "cn_to_en",
			Handler:       _ChatService_CnToEn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "en_to_cn",
			Handler:       _ChatService_EnToCn_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat_completion/chat_completion.proto",
}
