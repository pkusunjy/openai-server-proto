// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: wx_payment/wx_payment.proto

package wx_payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotifyService_JsapiNotifyUrl_FullMethodName = "/wx_payment.NotifyService/jsapi_notify_url"
)

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyServiceClient interface {
	JsapiNotifyUrl(ctx context.Context, in *NotifyUrlRequest, opts ...grpc.CallOption) (*NotifyUrlResponse, error)
}

type notifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyServiceClient(cc grpc.ClientConnInterface) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) JsapiNotifyUrl(ctx context.Context, in *NotifyUrlRequest, opts ...grpc.CallOption) (*NotifyUrlResponse, error) {
	out := new(NotifyUrlResponse)
	err := c.cc.Invoke(ctx, NotifyService_JsapiNotifyUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
// All implementations must embed UnimplementedNotifyServiceServer
// for forward compatibility
type NotifyServiceServer interface {
	JsapiNotifyUrl(context.Context, *NotifyUrlRequest) (*NotifyUrlResponse, error)
	mustEmbedUnimplementedNotifyServiceServer()
}

// UnimplementedNotifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyServiceServer struct {
}

func (UnimplementedNotifyServiceServer) JsapiNotifyUrl(context.Context, *NotifyUrlRequest) (*NotifyUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsapiNotifyUrl not implemented")
}
func (UnimplementedNotifyServiceServer) mustEmbedUnimplementedNotifyServiceServer() {}

// UnsafeNotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServiceServer will
// result in compilation errors.
type UnsafeNotifyServiceServer interface {
	mustEmbedUnimplementedNotifyServiceServer()
}

func RegisterNotifyServiceServer(s grpc.ServiceRegistrar, srv NotifyServiceServer) {
	s.RegisterService(&NotifyService_ServiceDesc, srv)
}

func _NotifyService_JsapiNotifyUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).JsapiNotifyUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyService_JsapiNotifyUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).JsapiNotifyUrl(ctx, req.(*NotifyUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyService_ServiceDesc is the grpc.ServiceDesc for NotifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wx_payment.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "jsapi_notify_url",
			Handler:    _NotifyService_JsapiNotifyUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx_payment/wx_payment.proto",
}

const (
	WxPaymentService_Jsapi_FullMethodName = "/wx_payment.WxPaymentService/jsapi"
)

// WxPaymentServiceClient is the client API for WxPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxPaymentServiceClient interface {
	Jsapi(ctx context.Context, in *JsApiRequest, opts ...grpc.CallOption) (*JsApiResponse, error)
}

type wxPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWxPaymentServiceClient(cc grpc.ClientConnInterface) WxPaymentServiceClient {
	return &wxPaymentServiceClient{cc}
}

func (c *wxPaymentServiceClient) Jsapi(ctx context.Context, in *JsApiRequest, opts ...grpc.CallOption) (*JsApiResponse, error) {
	out := new(JsApiResponse)
	err := c.cc.Invoke(ctx, WxPaymentService_Jsapi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxPaymentServiceServer is the server API for WxPaymentService service.
// All implementations must embed UnimplementedWxPaymentServiceServer
// for forward compatibility
type WxPaymentServiceServer interface {
	Jsapi(context.Context, *JsApiRequest) (*JsApiResponse, error)
	mustEmbedUnimplementedWxPaymentServiceServer()
}

// UnimplementedWxPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWxPaymentServiceServer struct {
}

func (UnimplementedWxPaymentServiceServer) Jsapi(context.Context, *JsApiRequest) (*JsApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jsapi not implemented")
}
func (UnimplementedWxPaymentServiceServer) mustEmbedUnimplementedWxPaymentServiceServer() {}

// UnsafeWxPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxPaymentServiceServer will
// result in compilation errors.
type UnsafeWxPaymentServiceServer interface {
	mustEmbedUnimplementedWxPaymentServiceServer()
}

func RegisterWxPaymentServiceServer(s grpc.ServiceRegistrar, srv WxPaymentServiceServer) {
	s.RegisterService(&WxPaymentService_ServiceDesc, srv)
}

func _WxPaymentService_Jsapi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxPaymentServiceServer).Jsapi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WxPaymentService_Jsapi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxPaymentServiceServer).Jsapi(ctx, req.(*JsApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WxPaymentService_ServiceDesc is the grpc.ServiceDesc for WxPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WxPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wx_payment.WxPaymentService",
	HandlerType: (*WxPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "jsapi",
			Handler:    _WxPaymentService_Jsapi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx_payment/wx_payment.proto",
}
